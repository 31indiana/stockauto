# best_k _ VB변동성돌파

from pykrx import stock
import numpy as np

def get_ror(k=0.5):
    #df = pyupbit.get_ohlcv("KRW-BTC", count=7)
    df = stock.get_market_ohlcv_by_date(fromdate="20160101", todate="20210611", ticker="261120")
    df['변동폭'] = (df['고가'] - df['저가']) * k
    df['목표가'] = df['시가'] + df['변동폭'].shift(1)
    df['5일이동평균'] = df['종가'].rolling(window=5).mean()
    df['10일이동평균'] = df['종가'].rolling(window=10).mean()

    cond_1 = df['고가'] > df['목표가']
    cond_2 = df['목표가'] > df['5일이동평균']
    cond_3 = df['목표가'] > df['10일이동평균']

    fee = 0.0003  #0.0003 or 0.000176 대신증권 월정액1.5만원 이용시 매수0.000088 매도0.000088 (매월거래액242,000,000원 이상부터 유리함)
    
    df['ror'] = np.where(cond_1,df['종가'] / df['목표가'] - fee, 1)
    ror = df['ror'].cumprod()[-2]                           
    
    return ror


for k in np.arange(0.1, 1.0, 0.1):
    ror = get_ror(k)
    print("%.1f %f" % (k, ror))
    
    
    

 
##############################################################################################################################################################################
##############################################################################################################################################################################
##############################################################################################################################################################################

# best_k _ VB변동성돌파 + MA 5

from pykrx import stock
import numpy as np

def get_ror(k=0.5):
    #df = pyupbit.get_ohlcv("KRW-BTC", count=7)
    df = stock.get_market_ohlcv_by_date(fromdate="20160101", todate="20210611", ticker="261250")
    df['변동폭'] = (df['고가'] - df['저가']) * k
    df['목표가'] = df['시가'] + df['변동폭'].shift(1)
    df['5일이동평균'] = df['종가'].rolling(window=5).mean()
    df['10일이동평균'] = df['종가'].rolling(window=10).mean()

    cond_1 = df['고가'] > df['목표가']
    cond_2 = df['목표가'] > df['5일이동평균']
    cond_3 = df['목표가'] > df['10일이동평균']

   fee = 0.0003  #0.0003 or 0.000176 대신증권 월정액1.5만원 이용시 매수0.000088 매도0.000088 (매월거래액242,000,000원 이상부터 유리함)
    
    df['ror'] = np.where(cond_1 & cond_2, df['종가'] / df['목표가'] - fee, 1)
    ror = df['ror'].cumprod()[-2]
                                   
    return ror


for k in np.arange(0.1, 1.0, 0.1):
    ror = get_ror(k)
    print("%.1f %f" % (k, ror))

#############################################################################################################################################################
#############################################################################################################################################################
#############################################################################################################################################################

# best_k _ VB변동성돌파 + MA 5 + MA10

from pykrx import stock
import numpy as np

def get_ror(k=0.5):
    #df = pyupbit.get_ohlcv("KRW-BTC", count=7)
    df = stock.get_market_ohlcv_by_date(fromdate="20160101", todate="20210611", ticker="261250")
    df['변동폭'] = (df['고가'] - df['저가']) * k
    df['목표가'] = df['시가'] + df['변동폭'].shift(1)
    df['5일이동평균'] = df['종가'].rolling(window=5).mean()
    df['10일이동평균'] = df['종가'].rolling(window=10).mean()

    cond_1 = df['고가'] > df['목표가']
    cond_2 = df['목표가'] > df['5일이동평균']
    cond_3 = df['목표가'] > df['10일이동평균']

   fee = 0.0003  #0.0003 or 0.000176 대신증권 월정액1.5만원 이용시 매수0.000088 매도0.000088 (매월거래액242,000,000원 이상부터 유리함)
                              
    df['ror'] = np.where(cond_1 & cond_2 & cond_3, df['종가'] / df['목표가'] - fee, 1)
    ror = df['ror'].cumprod()[-2]    
    
    return ror


for k in np.arange(0.1, 1.0, 0.1):
    ror = get_ror(k)
    print("%.1f %f" % (k, ror))

###############################################################################################################################################################################
###############################################################################################################################################################################
###############################################################################################################################################################################

# best_k _ VB변동성돌파 + MA10

from pykrx import stock
import numpy as np

def get_ror(k=0.5):
    #df = pyupbit.get_ohlcv("KRW-BTC", count=7)
    df = stock.get_market_ohlcv_by_date(fromdate="20160101", todate="20210611", ticker="261250")
    df['변동폭'] = (df['고가'] - df['저가']) * k
    df['목표가'] = df['시가'] + df['변동폭'].shift(1)
    df['5일이동평균'] = df['종가'].rolling(window=5).mean()
    df['10일이동평균'] = df['종가'].rolling(window=10).mean()

    cond_1 = df['고가'] > df['목표가']
    cond_2 = df['목표가'] > df['5일이동평균']
    cond_3 = df['목표가'] > df['10일이동평균']

    fee = 0.0003  #0.0003 or 0.000176 대신증권 월정액1.5만원 이용시 매수0.000088 매도0.000088 (매월거래액242,000,000원 이상부터 유리함)
    
    
    df['ror'] = np.where(cond_1 & cond_3, df['종가'] / df['목표가'] - fee, 1)
    ror = df['ror'].cumprod()[-2] 
                                   
    
    return ror


for k in np.arange(0.1, 1.0, 0.1):
    ror = get_ror(k)
    print("%.1f %f" % (k, ror))

    
    
    
